(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{370:function(n,s,e){"use strict";e.r(s);var t=e(36),i=Object(t.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("h1",{attrs:{id:"项目结构优化实战"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#项目结构优化实战"}},[n._v("#")]),n._v(" 项目结构优化实战")]),n._v(" "),e("p",[n._v("如下所示是某个项目的组织结构")]),n._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[n._v(".")]),n._v("\n├── public\n│   ├── images\n│   ├── js\n│   ├── css\n│   ├── favicon.ico\n│   ├── index.html\n│   └── version.txt\n├── src\n│   ├── api\n│   ├── assets\n│   │   ├── css\n│   │   │   └── activityXXX.scss\n│   │   │   └── activityYYY.scss\n│   │   │   └── activityZZZ.scss\n│   │   └── images\n│   │       ├── activityXXX\n│   │       ├── activityYYY\n│   │       ├── activityZZZ\n│   │       └── "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[n._v("..")]),n._v(".\n│   ├── components\n│   │   ├── Xyz.vue\n│   │   ├── x-y-z.vue\n│   │   └── xYz.vue\n│   ├── config\n│   ├── directive\n│   ├── filters\n│   ├── mixins\n│   ├── router\n│   ├── store\n│   ├── types\n│   ├── utils\n│   ├── views\n│   │   ├── activities\n│   │   │   ├── activity1\n│   │   │   ├── activity2\n│   │   │   ├── activity3\n│   │   ├── activityXxx\n│   │   │   └──  index.vue\n│   │   ├── activituYyy\n│   │   │   └── Index.vue\n│   │   ├── allOrder\n│   │   │   └── index.vue\n│   │   ├── orderDetail\n│   │   │   └── Index.vue\n│   │   ├── guide\n│   │   │   └── Index.vue\n│   │   ├── goods\n│   │   │   └── Index.vue\n│   │   ├── xxxGoods\n│   │   │   └── Index.vue\n│   │   ├── yyyGoods\n│   │   │   └── Index.vue\n│   │   ├── zzzGoods\n│   │   │   └── Index.vue\n│   │   ├── license\n│   │   ├── not-found\n│   │   ├── openSectionActivies\n│   │   │   └── index.vue\n│   │   └── Index.vue\n│   ├── App.vue\n│   ├── main.js\n│   └── shims-vue.d.ts\n├── README.md\n├── babel.config.js\n├── jsconfig.json\n├── package.json\n├── postcss.config.js\n├── tsconfig.json\n├── vue.config.js\n└── yarn.lock\n")])])]),e("p",[n._v("存在哪些问题？")]),n._v(" "),e("ol",[e("li",[e("p",[n._v("静态资源全部放在全局的 "),e("code",[n._v("./src/assets")]),n._v(" 目录下，且没有明确的管理模式，导致在组件引用静态资源的时候需要使用复杂的相对路径应用，例如："),e("code",[n._v("../../../images/pay/vip_bg.png")]),n._v("。")]),n._v(" "),e("p",[n._v("虽然可以配置别名直接从根目录开始引用，但大多项目都没有配置，或者开发人员不懂得如何配置。此外，一个 UI 组件的组成部分就是应该由模板、代码、样式和静态资源，这些都应该放在一块才能更加方便的维护。")])]),n._v(" "),e("li",[e("p",[n._v("所有接口请求都放在了网络请求层目录里了，导致随着业务的迭代，全局目录下的 API 越来越多，可阅读性变差，后续维护成本也变得越来越高。")]),n._v(" "),e("p",[n._v("开发人员需要区分某个接口是否是全局共用的还是特定场景使用的，如果不需要全局复用，请把相关的接口请求封装在各自的业务模块里。")])]),n._v(" "),e("li",[e("p",[n._v("全局组件目录的问题和网络请求接口类似，在该目录下放置了太多特定场景使用的组件了。")]),n._v(" "),e("p",[n._v("将模块放到全局目录下时，开发人员都应该慎重考虑，全局组件目录更应该放置一些业务无关的基础组件。如果大家在开发的过程中无法判定放在哪里，可以先放业务模块里，在后续开发过程中再考虑是否封装到全局。")])]),n._v(" "),e("li",[e("p",[n._v("路由页面的子目录没有规范的管理模式，不同的开发人员因个人喜好不同创建了不同的目录，而且命名规则也不一致。")]),n._v(" "),e("p",[n._v("现有的会员路由目录没有明确的业务模块划分，每个路由大多都是平铺放在根目录下，导致 会员项目主要包含四块业务：会员中心、会员频道、会员活动和会员订单，开发者")])])]),n._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[n._v("#")]),n._v(" 总结")]),n._v(" "),e("p",[e("strong",[n._v("分而治之")])]),n._v(" "),e("blockquote",[e("p",[n._v("分而治之是一种很古老但很实用的策略，或者说战略。本意即使将一个较大的力量打碎分成小的力量，这样每个小的力量都不足以对抗大的力量。在现实应用中，分而治之往往是阻止小力量联合起来的策略。")]),n._v(" "),e("p",[n._v("在计算机科学中，分治法是建基于多项分支递归的一种很重要的算法范式。字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法（快速排序、归并排序）、傅立叶变换（快速傅立叶变换）。")])]),n._v(" "),e("p",[n._v("在我们项目开发中也是同样的，我们应该将一个项目按一定的规则拆分成一个个小模块，从而降低我们的开发难度，反之如果项目内部没有合理的划分规则，导致一个个小问题交差组合变成了一个大问题，也就成了“屎山”。")])])}),[],!1,null,null,null);s.default=i.exports}}]);