(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{358:function(t,e,a){t.exports=a.p+"assets/img/auto.31e85eba.svg"},359:function(t,e,a){t.exports=a.p+"assets/img/basic.942379ad.svg"},387:function(t,e,a){"use strict";a.r(e);var s=a(36),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"版本管理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#版本管理"}},[t._v("#")]),t._v(" 版本管理")]),t._v(" "),s("h2",{attrs:{id:"约定式提交"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#约定式提交"}},[t._v("#")]),t._v(" 约定式提交")]),t._v(" "),s("blockquote",[s("p",[t._v("约定式提交规范是一种基于提交信息的轻量级约定，它提供了一组简单规则来创建清晰的提交历史，这更有利于编写自动化工具。通过在提交信息中描述功能、修复和破坏性变更，使这种惯例与"),s("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("语义化版本"),s("OutboundLink")],1),t._v("相互对应。 —— "),s("a",{attrs:{href:"https://www.conventionalcommits.org/zh-hans/v1.0.0/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.conventionalcommits.org/zh-hans/v1.0.0/"),s("OutboundLink")],1)])]),t._v(" "),s("p",[t._v("提交信息结构如下所示：")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("<type>[scope]: <description>\n\n[body]\n\n[footer(s)]\n")])])]),s("ul",[s("li",[s("p",[s("code",[t._v("type")]),t._v("：类型，主要使用 "),s("code",[t._v("fix")]),t._v(" 和 "),s("code",[t._v("feat")]),t._v(" 这两种类型，除了 "),s("code",[t._v("fix")]),t._v(" 和 "),s("code",[t._v("feat")]),t._v(" 外，我们主要遵循 "),s("a",{attrs:{href:"https://github.com/angular/angular/blob/22b96b9/CONTRIBUTING.md#-commit-message-guidelines",target:"_blank",rel:"noopener noreferrer"}},[t._v("Angular 约定"),s("OutboundLink")],1)]),t._v(" "),s("ul",[s("li",[s("code",[t._v("fix")]),t._v("：类型 为 fix 的提交表示在代码库中修复了一个 bug（这和语义化版本中的 PATCH 相对应）；")]),t._v(" "),s("li",[s("code",[t._v("feat")]),t._v("：类型 为 feat 的提交表示在代码库中新增了一个功能（这和语义化版本中的 MINOR 相对应）；")]),t._v(" "),s("li",[s("code",[t._v("docs")]),t._v("：只修改了文档")]),t._v(" "),s("li",[s("code",[t._v("style")]),t._v("：只修改了文档格式")]),t._v(" "),s("li",[s("code",[t._v("perf")]),t._v("：优化性能")]),t._v(" "),s("li",[s("code",[t._v("refactor")]),t._v("：重构代码")]),t._v(" "),s("li",[s("code",[t._v("test")]),t._v("：测试代码")]),t._v(" "),s("li",[s("code",[t._v("build")]),t._v("：构建或依赖相关的变更")]),t._v(" "),s("li",[s("code",[t._v("ci")]),t._v("：修改了 CI 配置")]),t._v(" "),s("li",[s("code",[t._v("revert:")]),t._v("：回滚代码")])])]),t._v(" "),s("li",[s("p",[s("code",[t._v("scope")]),t._v("：范围（可选），表示本次提交改动的范围（根据具体项目的模块划分而定）")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("description")]),t._v("：描述，一句简洁的改动说明")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("body")]),t._v("：正文（可选），通常用于解释说明改动的原因")])]),t._v(" "),s("li",[s("p",[s("code",[t._v("footer")]),t._v("：脚注（可选），一些额外的备注说明")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("BREAKING CHANGE:")]),t._v("：在脚注中包含 "),s("code",[t._v("BREAKING CHANGE:")]),t._v(" 的提交，表示引入了破坏性 API 变更，这和语义化版本中的 MAJOR 相对应。破坏性的变更可能是 fix 或者 feat 类型的提交引起的，所以通过脚注的方式来表明。")]),t._v(" "),s("li",[s("code",[t._v("Reviewed-by:")]),t._v("：注明由谁 review")]),t._v(" "),s("li",[s("code",[t._v("Refs:")]),t._v("：注明关联的需求或者问题地址")])])])]),t._v(" "),s("p",[t._v("范例：")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("修复")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("fix: prevent racing of requests\n")])])])]),t._v(" "),s("li",[s("p",[t._v("功能")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("feat(lang): add polish language\n")])])])]),t._v(" "),s("li",[s("p",[t._v("破坏性变更")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("feat: allow provided config object to extend other configs\n\nBREAKING CHANGE: `extends` key in config file is now used for extending other config files\n")])])])])]),t._v(" "),s("p",[t._v("扩展阅读")]),t._v(" "),s("ul",[s("li",[s("RouterLink",{attrs:{to:"/guide/tools/commit-linter.html"}},[t._v("Git Commit Lint工具")])],1),t._v(" "),s("li",[s("RouterLink",{attrs:{to:"/guide/tools/git-command.html"}},[t._v("Git 命令集合")])],1)]),t._v(" "),s("h2",{attrs:{id:"分支工作流"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分支工作流"}},[t._v("#")]),t._v(" 分支工作流")]),t._v(" "),s("p",[t._v("Git 版本管理需要一个清晰的流程及规范，避免团队成员提交各式风格的commit，使项目更容易维护，根据项目的业务属性可以划分为两种项目：")]),t._v(" "),s("ul",[s("li",[t._v("业务项目")]),t._v(" "),s("li",[t._v("技术项目")])]),t._v(" "),s("h3",{attrs:{id:"业务项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#业务项目"}},[t._v("#")]),t._v(" 业务项目")]),t._v(" "),s("p",[s("img",{attrs:{src:a(358),alt:"auto.svg"}})]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("- master：主分支，只能从其他分支合并，不能直接修改\n- cicd_debug：联调分支\n- cicd_test：测试分支\n- cicd_rc：预发分支\n- cicd_prod：生产分支\n- feature/xxx：功能分支\n- hotfix/xxx：线上问题修复分支\n")])])]),s("ul",[s("li",[s("p",[t._v("新功能处理")]),t._v(" "),s("ol",[s("li",[t._v("从 master 分支切一个新的功能分支 feature/xxx；")]),t._v(" "),s("li",[t._v("在 feature/xxx 提交功能变更 "),s("code",[t._v("feat: ...")]),t._v("；")])])]),t._v(" "),s("li",[s("p",[t._v("部署测试环境：")]),t._v(" "),s("ol",[s("li",[t._v("将功能分支 feature/xxx 合并到测试分支 cicd_test；")]),t._v(" "),s("li",[t._v("等待自动化部署（Gitlab CI 或 Jenkins）；")])])]),t._v(" "),s("li",[s("p",[t._v("部署预发环境")]),t._v(" "),s("ol",[s("li",[s("p",[t._v("基于 master 建立 release/x.y.z 分支；")])]),t._v(" "),s("li",[s("p",[t._v("将功能分支 feature/xxx 合并到 release/x.y.z；")])]),t._v(" "),s("li",[s("p",[t._v("修改版本说明文件（通常是 "),s("code",[t._v("./CHANGELOG.md")]),t._v("），增加新的版本修改说明；")]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("## 1.0.0-beta.1 (YYYY-MM-DD)\n\n1. xxx\n2. xxx\n")])])]),s("p",[t._v("ps：新版本号可以根据改动范围和大小来决定，详情参照上文的”约定式提交“规范。")])]),t._v(" "),s("li",[s("p",[t._v("将 release/x.y.z 合并到 cicd_rc 分支；")])]),t._v(" "),s("li",[s("p",[t._v("等待自动化部署（Gitlab CI 或 Jenkins）；")])])])]),t._v(" "),s("li",[s("p",[t._v("部署生产环境")]),t._v(" "),s("p",[t._v("将 release/x.y.z 合并到 cicd_prod，然后通知运维部署容器服务即可。")])])]),t._v(" "),s("p",[t._v("ps：通过统一的 release 分支去处理发布，会使发布流程更加严谨且避免了重复的冲突处理操作（大多冲突在 release 分支处理掉了）。此外，在遇到多版本并行时，可以根据实际情况创建多个 release 分支。")]),t._v(" "),s("h3",{attrs:{id:"技术项目"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#技术项目"}},[t._v("#")]),t._v(" 技术项目")]),t._v(" "),s("p",[s("img",{attrs:{src:a(359),alt:"basic.svg"}})]),t._v(" "),s("h2",{attrs:{id:"常见问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常见问题"}},[t._v("#")]),t._v(" 常见问题")]),t._v(" "),s("p",[t._v("· "),s("strong",[t._v("例子")]),t._v("：你提交后发现忘记了还有要修改的地方也属于当前的内容，可以像下面这样操作：")]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'chore: 相关内容提交信息'")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" version.txt\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit --amend\n")])])]),s("p",[t._v("· "),s("strong",[t._v("例2")]),t._v("：取消暂存在暂存区的某个文件")]),t._v(" "),s("div",{staticClass:"language-shell script extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" status\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" restore --staged file_name\n")])])]),s("p",[t._v("· "),s("strong",[t._v("例3")]),t._v("：取消提交在commit版本库的内容，保留工作区的内容")]),t._v(" "),s("div",{staticClass:"language-shell script extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v("$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'feat: 新增了功能'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销操作")]),t._v("\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" log\n$ "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft head^\n")])])]),s("blockquote",[s("p",[t._v("回退命令：     回退对象")]),t._v(" "),s("p",[t._v("--hard       // 工作区，版本库，暂存区")]),t._v(" "),s("p",[t._v("--mixed(默认) // 版本库 暂存区")]),t._v(" "),s("p",[t._v("--soft       // 版本库")])]),t._v(" "),s("div",{staticClass:"language-shell extra-class"},[s("pre",{pre:!0,attrs:{class:"language-shell"}},[s("code",[t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard commit_id  // 退到/进到，指定commit的哈希码（这次提交之前或之后的提交都会回滚）\n")])])]),s("h2",{attrs:{id:"参考文献"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文献"}},[t._v("#")]),t._v(" 参考文献")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"./images/git-model.png?raw=true"}},[t._v("git-model.png")])]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2015/12/git-workflow.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git 工作流程"),s("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=v.exports}}]);